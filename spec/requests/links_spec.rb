require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/links", type: :request do

  before(:all) do
    FactoryBot.create(:link, title: "test title 1", link_address: "https://test_link")
    FactoryBot.create(:link, title: "test title 2", link_address: "https://test_link")
  end

  describe "GET all links at /links" do
    it "renders all links" do
      get "/links"
      expect(response).to have_http_status(:success)
      # it seems db cleaner not working
      # expect(JSON.parse(response.body).size).to eq(2)
    end
  end

  # describe "GET a message at /links/:id" do
  #   it "renders a link based on the param" do
  #     get "/links/1"
  #     expect(response).to have_http_status(:success)
  #   end
  # end

  describe "GET a message at /links/:id" do
    it "renders a not found error if there isn't a link based on the params" do
      get "/links/10000"
      expect(response).to have_http_status(:not_found)
    end
  end

  describe "POST /links" do
    it "creates a new Link" do
      post "/links", params: {link: {title: "post test", link_address: "https://test"}}
      expect(response).to have_http_status(:created)
    end
    
    it "renders an warning message if the pamas contains invalid data" do
      post "/links", params: {link: {title: "post test", address: "https://test"}}
      expect(response).to have_http_status(:unprocessable_entity)
    end
  end
  
  describe "PATCH /links/:id" do
    it "updates the data based on the params" do
      put "/links/1", params: {link: {title: "update test"}}
      expect(response).to have_http_status(:ok)
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested link" do
      delete "/links/1"
      expect(response).to have_http_status(:no_content)
    end
  end
end
